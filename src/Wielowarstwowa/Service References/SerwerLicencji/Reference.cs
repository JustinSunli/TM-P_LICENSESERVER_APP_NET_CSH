//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wielowarstwowa.SerwerLicencji {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WiadomoscZwrotna", Namespace="http://schemas.datacontract.org/2004/07/SerwerLicencji")]
    public enum WiadomoscZwrotna : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pomyslnie = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Niepomyslnie = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Licencja", Namespace="http://schemas.datacontract.org/2004/07/SerwerLicencji")]
    [System.SerializableAttribute()]
    public partial class Licencja : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DataWygasnieciaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProgramIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DataWygasniecia {
            get {
                return this.DataWygasnieciaField;
            }
            set {
                if ((this.DataWygasnieciaField.Equals(value) != true)) {
                    this.DataWygasnieciaField = value;
                    this.RaisePropertyChanged("DataWygasniecia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProgramID {
            get {
                return this.ProgramIDField;
            }
            set {
                if ((this.ProgramIDField.Equals(value) != true)) {
                    this.ProgramIDField = value;
                    this.RaisePropertyChanged("ProgramID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Uzytkownik", Namespace="http://schemas.datacontract.org/2004/07/SerwerLicencji")]
    [System.SerializableAttribute()]
    public partial class Uzytkownik : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] LicencjeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazwiskoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Wielowarstwowa.SerwerLicencji.Uprawnienia UprawnieniaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imie {
            get {
                return this.ImieField;
            }
            set {
                if ((object.ReferenceEquals(this.ImieField, value) != true)) {
                    this.ImieField = value;
                    this.RaisePropertyChanged("Imie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] LicencjeID {
            get {
                return this.LicencjeIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LicencjeIDField, value) != true)) {
                    this.LicencjeIDField = value;
                    this.RaisePropertyChanged("LicencjeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nazwisko {
            get {
                return this.NazwiskoField;
            }
            set {
                if ((object.ReferenceEquals(this.NazwiskoField, value) != true)) {
                    this.NazwiskoField = value;
                    this.RaisePropertyChanged("Nazwisko");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Wielowarstwowa.SerwerLicencji.Uprawnienia Uprawnienia {
            get {
                return this.UprawnieniaField;
            }
            set {
                if ((this.UprawnieniaField.Equals(value) != true)) {
                    this.UprawnieniaField = value;
                    this.RaisePropertyChanged("Uprawnienia");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Uprawnienia", Namespace="http://schemas.datacontract.org/2004/07/SerwerLicencji")]
    public enum Uprawnienia : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Anonim = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Uzytkownik = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Administrator = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Program", Namespace="http://schemas.datacontract.org/2004/07/SerwerLicencji")]
    [System.SerializableAttribute()]
    public partial class Program : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazwaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nazwa {
            get {
                return this.NazwaField;
            }
            set {
                if ((object.ReferenceEquals(this.NazwaField, value) != true)) {
                    this.NazwaField = value;
                    this.RaisePropertyChanged("Nazwa");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsuwanyTyp", Namespace="http://schemas.datacontract.org/2004/07/SerwerLicencji")]
    public enum UsuwanyTyp : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Uzytkownik = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Program = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Licencja = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SerwerLicencji.ILicencje")]
    public interface ILicencje {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/Logowanie", ReplyAction="http://tempuri.org/ILicencje/LogowanieResponse")]
        Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna Logowanie(string login, string haslo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/Logowanie", ReplyAction="http://tempuri.org/ILicencje/LogowanieResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> LogowanieAsync(string login, string haslo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzMojeLicencje", ReplyAction="http://tempuri.org/ILicencje/PobierzMojeLicencjeResponse")]
        Wielowarstwowa.SerwerLicencji.Licencja[] PobierzMojeLicencje();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzMojeLicencje", ReplyAction="http://tempuri.org/ILicencje/PobierzMojeLicencjeResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Licencja[]> PobierzMojeLicencjeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzUzytkownikow", ReplyAction="http://tempuri.org/ILicencje/PobierzUzytkownikowResponse")]
        Wielowarstwowa.SerwerLicencji.Uzytkownik[] PobierzUzytkownikow();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzUzytkownikow", ReplyAction="http://tempuri.org/ILicencje/PobierzUzytkownikowResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Uzytkownik[]> PobierzUzytkownikowAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzMojeDane", ReplyAction="http://tempuri.org/ILicencje/PobierzMojeDaneResponse")]
        Wielowarstwowa.SerwerLicencji.Uzytkownik PobierzMojeDane();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzMojeDane", ReplyAction="http://tempuri.org/ILicencje/PobierzMojeDaneResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Uzytkownik> PobierzMojeDaneAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzLicencje", ReplyAction="http://tempuri.org/ILicencje/PobierzLicencjeResponse")]
        Wielowarstwowa.SerwerLicencji.Licencja[] PobierzLicencje(System.Nullable<int> uzytkownik);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzLicencje", ReplyAction="http://tempuri.org/ILicencje/PobierzLicencjeResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Licencja[]> PobierzLicencjeAsync(System.Nullable<int> uzytkownik);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzProgramy", ReplyAction="http://tempuri.org/ILicencje/PobierzProgramyResponse")]
        Wielowarstwowa.SerwerLicencji.Program[] PobierzProgramy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzProgramy", ReplyAction="http://tempuri.org/ILicencje/PobierzProgramyResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Program[]> PobierzProgramyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzMojeProgramy", ReplyAction="http://tempuri.org/ILicencje/PobierzMojeProgramyResponse")]
        Wielowarstwowa.SerwerLicencji.Program[] PobierzMojeProgramy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/PobierzMojeProgramy", ReplyAction="http://tempuri.org/ILicencje/PobierzMojeProgramyResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Program[]> PobierzMojeProgramyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/DodajUzytkownika", ReplyAction="http://tempuri.org/ILicencje/DodajUzytkownikaResponse")]
        Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna DodajUzytkownika(string imie, string nazwisko, string login, string haslo, Wielowarstwowa.SerwerLicencji.Uprawnienia uprawnienia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/DodajUzytkownika", ReplyAction="http://tempuri.org/ILicencje/DodajUzytkownikaResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> DodajUzytkownikaAsync(string imie, string nazwisko, string login, string haslo, Wielowarstwowa.SerwerLicencji.Uprawnienia uprawnienia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/DodajProgram", ReplyAction="http://tempuri.org/ILicencje/DodajProgramResponse")]
        Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna DodajProgram(string nazwa);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/DodajProgram", ReplyAction="http://tempuri.org/ILicencje/DodajProgramResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> DodajProgramAsync(string nazwa);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/DodajLicencje", ReplyAction="http://tempuri.org/ILicencje/DodajLicencjeResponse")]
        Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna DodajLicencje(int uzytkownikId, int programId, System.DateTime dataWygasniecia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/DodajLicencje", ReplyAction="http://tempuri.org/ILicencje/DodajLicencjeResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> DodajLicencjeAsync(int uzytkownikId, int programId, System.DateTime dataWygasniecia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/UsunPozycje", ReplyAction="http://tempuri.org/ILicencje/UsunPozycjeResponse")]
        Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna UsunPozycje(int id, Wielowarstwowa.SerwerLicencji.UsuwanyTyp typ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicencje/UsunPozycje", ReplyAction="http://tempuri.org/ILicencje/UsunPozycjeResponse")]
        System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> UsunPozycjeAsync(int id, Wielowarstwowa.SerwerLicencji.UsuwanyTyp typ);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILicencjeChannel : Wielowarstwowa.SerwerLicencji.ILicencje, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicencjeClient : System.ServiceModel.ClientBase<Wielowarstwowa.SerwerLicencji.ILicencje>, Wielowarstwowa.SerwerLicencji.ILicencje {
        
        public LicencjeClient() {
        }
        
        public LicencjeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicencjeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicencjeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicencjeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna Logowanie(string login, string haslo) {
            return base.Channel.Logowanie(login, haslo);
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> LogowanieAsync(string login, string haslo) {
            return base.Channel.LogowanieAsync(login, haslo);
        }
        
        public Wielowarstwowa.SerwerLicencji.Licencja[] PobierzMojeLicencje() {
            return base.Channel.PobierzMojeLicencje();
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Licencja[]> PobierzMojeLicencjeAsync() {
            return base.Channel.PobierzMojeLicencjeAsync();
        }
        
        public Wielowarstwowa.SerwerLicencji.Uzytkownik[] PobierzUzytkownikow() {
            return base.Channel.PobierzUzytkownikow();
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Uzytkownik[]> PobierzUzytkownikowAsync() {
            return base.Channel.PobierzUzytkownikowAsync();
        }
        
        public Wielowarstwowa.SerwerLicencji.Uzytkownik PobierzMojeDane() {
            return base.Channel.PobierzMojeDane();
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Uzytkownik> PobierzMojeDaneAsync() {
            return base.Channel.PobierzMojeDaneAsync();
        }
        
        public Wielowarstwowa.SerwerLicencji.Licencja[] PobierzLicencje(System.Nullable<int> uzytkownik) {
            return base.Channel.PobierzLicencje(uzytkownik);
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Licencja[]> PobierzLicencjeAsync(System.Nullable<int> uzytkownik) {
            return base.Channel.PobierzLicencjeAsync(uzytkownik);
        }
        
        public Wielowarstwowa.SerwerLicencji.Program[] PobierzProgramy() {
            return base.Channel.PobierzProgramy();
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Program[]> PobierzProgramyAsync() {
            return base.Channel.PobierzProgramyAsync();
        }
        
        public Wielowarstwowa.SerwerLicencji.Program[] PobierzMojeProgramy() {
            return base.Channel.PobierzMojeProgramy();
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.Program[]> PobierzMojeProgramyAsync() {
            return base.Channel.PobierzMojeProgramyAsync();
        }
        
        public Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna DodajUzytkownika(string imie, string nazwisko, string login, string haslo, Wielowarstwowa.SerwerLicencji.Uprawnienia uprawnienia) {
            return base.Channel.DodajUzytkownika(imie, nazwisko, login, haslo, uprawnienia);
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> DodajUzytkownikaAsync(string imie, string nazwisko, string login, string haslo, Wielowarstwowa.SerwerLicencji.Uprawnienia uprawnienia) {
            return base.Channel.DodajUzytkownikaAsync(imie, nazwisko, login, haslo, uprawnienia);
        }
        
        public Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna DodajProgram(string nazwa) {
            return base.Channel.DodajProgram(nazwa);
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> DodajProgramAsync(string nazwa) {
            return base.Channel.DodajProgramAsync(nazwa);
        }
        
        public Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna DodajLicencje(int uzytkownikId, int programId, System.DateTime dataWygasniecia) {
            return base.Channel.DodajLicencje(uzytkownikId, programId, dataWygasniecia);
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> DodajLicencjeAsync(int uzytkownikId, int programId, System.DateTime dataWygasniecia) {
            return base.Channel.DodajLicencjeAsync(uzytkownikId, programId, dataWygasniecia);
        }
        
        public Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna UsunPozycje(int id, Wielowarstwowa.SerwerLicencji.UsuwanyTyp typ) {
            return base.Channel.UsunPozycje(id, typ);
        }
        
        public System.Threading.Tasks.Task<Wielowarstwowa.SerwerLicencji.WiadomoscZwrotna> UsunPozycjeAsync(int id, Wielowarstwowa.SerwerLicencji.UsuwanyTyp typ) {
            return base.Channel.UsunPozycjeAsync(id, typ);
        }
    }
}
